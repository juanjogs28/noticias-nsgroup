// Servicio de cachÃ© para gestiÃ³n inteligente de noticias almacenadas
const CachedNews = require("../models/cachedNews");
const { generateFallbackData } = require("../routes/news");

class CacheService {
  // Obtener artÃ­culos del cachÃ© con estrategia balanceada de tiempo
  static async getCachedArticles(searchId, maxAgeHours = 6) {
    try {
      const cached = await CachedNews.findOne({ searchId });
      
      if (!cached) {
        console.log(`ğŸ“¦ No hay cache para searchId: ${searchId}`);
        return null;
      }

      // Calcular la antigÃ¼edad del cachÃ© en horas
      const ageHours = (Date.now() - cached.lastUpdated) / (1000 * 60 * 60);
      
      // Estrategia balanceada: usar cachÃ© por 6 horas para obtener datos frescos
      if (ageHours > maxAgeHours) {
        console.log(`ğŸ“¦ Cache expirado para ${searchId} (${ageHours.toFixed(1)} horas)`);
        return null;
      }

      console.log(`ğŸ“¦ Cache vÃ¡lido para ${searchId} (${ageHours.toFixed(1)} horas, ${cached.totalArticles} artÃ­culos)`);
      return cached.articles;
    } catch (error) {
      console.error("Error obteniendo cache:", error);
      return null;
    }
  }

  // Guardar artÃ­culos en cachÃ© con informaciÃ³n de origen
  static async saveCachedArticles(searchId, articles, isFromMeltwater = false) {
    try {
      // Determinar categorÃ­a basada en el searchId
      const category = searchId === "27551367" ? "paÃ­s" : "sector";
      
      // Actualizar o crear entrada en cachÃ©
      await CachedNews.findOneAndUpdate(
        { searchId },
        {
          searchId,
          category,
          articles,
          lastUpdated: new Date(),
          isFromMeltwater,
          totalArticles: articles.length
        },
        { upsert: true, new: true }
      );

      console.log(`ğŸ’¾ Cache guardado para ${category}: ${articles.length} artÃ­culos (Meltwater: ${isFromMeltwater})`);
    } catch (error) {
      console.error("Error guardando cache:", error);
    }
  }

  // Obtener artÃ­culos con estrategia de fallback inteligente
  static async getArticlesWithFallback(searchId) {
    // 1. Intentar obtener del cachÃ© primero
    const cachedArticles = await this.getCachedArticles(searchId);
    if (cachedArticles && cachedArticles.length > 0) {
      return cachedArticles;
    }

    // 2. Si no hay cachÃ©, generar datos de fallback
    console.log(`ğŸ”„ Generando fallback para searchId: ${searchId}`);
    const fallbackArticles = generateFallbackData(searchId);
    
    // 3. Guardar fallback en cachÃ© para uso futuro
    await this.saveCachedArticles(searchId, fallbackArticles, false);
    
    return fallbackArticles;
  }

  // Obtener artÃ­culos con lÃ­mite aumentado para garantizar contenido suficiente
  static async getCachedArticlesWithLimit(searchId, maxAgeHours = 72, minArticles = 50) {
    try {
      const cached = await CachedNews.findOne({ searchId });
      
      if (!cached) {
        console.log(`ğŸ“¦ No hay cache para searchId: ${searchId}`);
        return null;
      }

      // Calcular antigÃ¼edad del cachÃ©
      const ageHours = (Date.now() - cached.lastUpdated) / (1000 * 60 * 60);
      
      if (ageHours > maxAgeHours) {
        console.log(`ğŸ“¦ Cache expirado para ${searchId} (${ageHours.toFixed(1)} horas)`);
        return null;
      }

      // Si tenemos suficientes artÃ­culos en cachÃ©, devolverlos
      if (cached.articles && cached.articles.length >= minArticles) {
        console.log(`ğŸ“¦ Cache vÃ¡lido para ${searchId} (${ageHours.toFixed(1)} horas, ${cached.totalArticles} artÃ­culos)`);
        return cached.articles;
      }

      // Si no hay suficientes artÃ­culos, devolver null para forzar actualizaciÃ³n
      console.log(`ğŸ“¦ Cache insuficiente para ${searchId} (${cached.totalArticles} < ${minArticles} artÃ­culos)`);
      return null;
    } catch (error) {
      console.error("Error obteniendo cache:", error);
      return null;
    }
  }

  // Limpiar cachÃ© expirado basado en antigÃ¼edad
  static async cleanExpiredCache(maxAgeHours = 48) {
    try {
      const cutoffDate = new Date(Date.now() - maxAgeHours * 60 * 60 * 1000);
      const result = await CachedNews.deleteMany({ lastUpdated: { $lt: cutoffDate } });
      console.log(`ğŸ§¹ Cache limpiado: ${result.deletedCount} entradas expiradas eliminadas`);
    } catch (error) {
      console.error("Error limpiando cache:", error);
    }
  }

  // Forzar uso de fallback eliminando cachÃ© existente
  static async forceFallbackForSearchId(searchId) {
    try {
      // Eliminar cachÃ© existente para este searchId
      await CachedNews.deleteOne({ searchId });
      console.log(`ğŸ”„ Cache eliminado para searchId: ${searchId} - forzando fallback`);
      return true;
    } catch (error) {
      console.error("Error forzando fallback:", error);
      return false;
    }
  }

  // Limpiar todo el cachÃ© para forzar nuevas peticiones a Meltwater
  static async clearAllCache() {
    try {
      const result = await CachedNews.deleteMany({});
      console.log(`ğŸ§¹ Cache completamente limpiado: ${result.deletedCount} entradas eliminadas`);
      return result.deletedCount;
    } catch (error) {
      console.error("Error limpiando todo el cache:", error);
      return 0;
    }
  }

  // Limpiar solo cachÃ© de fallback (datos ficticios, no de Meltwater)
  static async clearFallbackCache() {
    try {
      const result = await CachedNews.deleteMany({ isFromMeltwater: false });
      console.log(`ğŸ§¹ Cache de fallback limpiado: ${result.deletedCount} entradas eliminadas`);
      return result.deletedCount;
    } catch (error) {
      console.error("Error limpiando cache de fallback:", error);
      return 0;
    }
  }

  // Limpiar cachÃ© para un searchId especÃ­fico
  static async clearCacheForSearchId(searchId) {
    try {
      const result = await CachedNews.deleteOne({ searchId });
      console.log(`ğŸ§¹ Cache limpiado para searchId: ${searchId} (${result.deletedCount} entradas eliminadas)`);
      return result.deletedCount;
    } catch (error) {
      console.error("Error limpiando cache para searchId:", error);
      return 0;
    }
  }
}

module.exports = CacheService;
