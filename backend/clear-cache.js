const mongoose = require("mongoose");
const CachedNews = require("./models/cachedNews");

// Conectar a MongoDB
async function connectToMongoDB() {
  try {
    const MONGODB_URI = process.env.MONGODB_URI || process.env.DATABASE_URL || process.env.MONGO_URI || "mongodb://localhost:27017/ns-news";
    
    await mongoose.connect(MONGODB_URI, {
      useNewUrlParser: true,
      useUnifiedTopology: true,
      serverSelectionTimeoutMS: 5000,
      socketTimeoutMS: 45000,
    });
    
    console.log("‚úÖ Conectado a MongoDB");
    return true;
  } catch (error) {
    console.error("‚ùå Error conectando a MongoDB:", error);
    return false;
  }
}

// Limpiar todo el cach√©
async function clearAllCache() {
  try {
    const result = await CachedNews.deleteMany({});
    console.log(`üßπ Cache completamente limpiado: ${result.deletedCount} entradas eliminadas`);
    return result.deletedCount;
  } catch (error) {
    console.error("‚ùå Error limpiando cache:", error);
    return 0;
  }
}

// Limpiar solo cach√© de fallback
async function clearFallbackCache() {
  try {
    const result = await CachedNews.deleteMany({ isFromMeltwater: false });
    console.log(`üßπ Cache de fallback limpiado: ${result.deletedCount} entradas eliminadas`);
    return result.deletedCount;
  } catch (error) {
    console.error("‚ùå Error limpiando cache de fallback:", error);
    return 0;
  }
}

// Funci√≥n principal
async function main() {
  console.log("üîß Iniciando limpieza de cach√©...");
  
  const connected = await connectToMongoDB();
  if (!connected) {
    process.exit(1);
  }
  
  // Limpiar todo el cach√©
  const deletedCount = await clearAllCache();
  
  console.log(`‚úÖ Proceso completado. ${deletedCount} entradas eliminadas del cach√©.`);
  console.log("üìù Las pr√≥ximas peticiones intentar√°n obtener datos reales de Meltwater.");
  
  await mongoose.disconnect();
  console.log("üîå Desconectado de MongoDB");
}

// Ejecutar si es llamado directamente
if (require.main === module) {
  main().catch(console.error);
}

module.exports = { clearAllCache, clearFallbackCache };
