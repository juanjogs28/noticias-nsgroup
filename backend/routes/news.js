// Router para gesti√≥n de noticias con integraci√≥n a Meltwater API
const express = require("express");
const router = express.Router();
const Subscriber = require("../models/subscribers.js");
const Subscription = require("../models/subscriptions.js");
const DefaultConfig = require("../models/defaultConfig.js");
const fetch = require("node-fetch");
const MELTWATER_API_URL = "https://api.meltwater.com";
const MELTWATER_TOKEN = process.env.MELTWATER_API_TOKEN;

// Endpoint de diagn√≥stico para verificar el estado de las variables de entorno cr√≠ticas
router.get("/debug/env", (req, res) => {
  const envStatus = {
    MELTWATER_API_TOKEN: process.env.MELTWATER_API_TOKEN ? 'Configurada' : 'NO CONFIGURADA',
    MONGODB_URI: process.env.MONGODB_URI ? 'Configurada' : 'NO CONFIGURADA',
    RESEND_API_KEY: process.env.RESEND_API_KEY ? 'Configurada' : 'NO CONFIGURADA',
    ADMIN_PASSWORD: process.env.ADMIN_PASSWORD ? 'Configurada' : 'NO CONFIGURADA',
    NODE_ENV: process.env.NODE_ENV || 'undefined'
  };
  
  console.log("üîç DIAGN√ìSTICO DE VARIABLES EN PRODUCCI√ìN:");
  console.log(envStatus);
  
  res.json({
    success: true,
    environment: envStatus,
    timestamp: new Date().toISOString()
  });
});

// Endpoint para limpiar cach√© desde Railway (forzar nuevas peticiones a Meltwater)
router.post("/clear-cache", async (req, res) => {
  try {
    console.log("üßπ Iniciando limpieza de cach√© desde Railway...");
    
    // CACH√â COMPLETAMENTE ELIMINADO - No usar cach√©
    // const CachedNews = require("../models/cachedNews.js");
    // const result = await CachedNews.deleteMany({});
    const result = { deletedCount: 0 }; // Cach√© eliminado
    
    console.log(`‚úÖ Cach√© completamente eliminado - No hay cach√© que limpiar`);
    
    res.json({
      success: true,
      message: `Cache limpiado exitosamente. ${result.deletedCount} entradas eliminadas.`,
      deletedCount: result.deletedCount,
      timestamp: new Date().toISOString()
    });
  } catch (error) {
    console.error("‚ùå Error limpiando cach√©:", error);
    res.status(500).json({
      success: false,
      message: "Error limpiando cach√©",
      error: error.message
    });
  }
});

// Funci√≥n para asegurar conexi√≥n a MongoDB antes de operaciones de base de datos
async function ensureConnection() {
  const mongoose = require("mongoose");
  if (mongoose.connection.readyState === 0) {
    const MONGODB_URI = process.env.MONGODB_URI || process.env.DATABASE_URL || process.env.MONGO_URI || "mongodb://localhost:27017/ns-news";
    await mongoose.connect(MONGODB_URI, {
      useNewUrlParser: true,
      useUnifiedTopology: true,
      serverSelectionTimeoutMS: 5000,
      socketTimeoutMS: 45000,
    });
  }
}


// Funci√≥n para generar ID √∫nico de un documento
function generateDocumentId(doc) {
  // Usar ID si existe, sino URL, sino t√≠tulo+fuente+fecha
  if (doc.id) return `id:${doc.id}`;
  if (doc.url) return `url:${doc.url}`;
  const title = doc.content?.title || doc.title || '';
  const source = doc.source?.name || '';
  const date = doc.published_date || '';
  return `hash:${title}_${source}_${date}`;
}

// Funci√≥n principal para obtener resultados de b√∫squeda - Asegura m√≠nimo 50 art√≠culos √∫nicos con paginaci√≥n
async function getSearchResults(searchId, includeSocial = false) {
  let allDocuments = [];
  const seenIds = new Set(); // Para evitar duplicados
  const MIN_ARTICLES = 60; // M√≠nimo requerido de art√≠culos √∫nicos (aumentado para dar margen)

  try {
    console.log(`üîç Intentando Meltwater para searchId: ${searchId} - Objetivo: m√≠nimo ${MIN_ARTICLES} art√≠culos √∫nicos`);
    console.log(`üîç DEBUG - MELTWATER_TOKEN configurado: ${MELTWATER_TOKEN ? 'S√≠' : 'No'}`);
    console.log(`üîç DEBUG - MELTWATER_API_URL: ${MELTWATER_API_URL}`);
    console.log(`üîç DEBUG - Include Social: ${includeSocial ? 'S√ç' : 'NO'}`);
    
    allDocuments = [];
    const now = new Date();
    const end = now.toISOString().slice(0, 19);
    
    // Estrategia optimizada: usar ventanas m√°s grandes con paginaci√≥n
    const windowSize = 30; // 30 d√≠as por ventana (aumentado desde 7)
    const totalDays = 150; // 5 meses en total
    const numberOfWindows = 5; // 5 ventanas de 30 d√≠as
    
    const dateWindows = [];
    for (let i = 0; i < numberOfWindows; i++) {
      const daysEnd = windowSize * (i + 1);
      const daysStart = windowSize * i;
      dateWindows.push({
        name: `ventana ${i + 1} (d√≠as ${daysStart}-${daysEnd})`,
        startDays: daysStart,
        endDays: daysEnd
      });
    }
    
    // Solo usar relevance
    const sortBy = "relevance";
    
    console.log(`\nüìÖ Usando ${dateWindows.length} ventanas de tiempo de ${windowSize} d√≠as cada una con paginaci√≥n`);
    
    for (const window of dateWindows) {
      // Si ya tenemos suficientes art√≠culos, no continuar
      if (allDocuments.length >= MIN_ARTICLES) {
        console.log(`üéØ Ya tenemos ${allDocuments.length} art√≠culos, suficiente para continuar`);
        break;
      }
      
      const startDate = new Date(now.getTime() - window.endDays * 24 * 60 * 60 * 1000).toISOString().slice(0, 19);
      const endDate = new Date(now.getTime() - window.startDays * 24 * 60 * 60 * 1000).toISOString().slice(0, 19);
      
      console.log(`\nüìÖ Ventana: ${window.name} (${startDate} a ${endDate})`);
      
      // Paginaci√≥n dentro de cada ventana
      let offset = 0;
      let windowHasMore = true;
      const PAGE_SIZE = 50;
      const MAX_PAGES_PER_WINDOW = 5; // M√°ximo 5 p√°ginas por ventana (250 art√≠culos)
      let pageCount = 0;
      
      while (windowHasMore && allDocuments.length < MIN_ARTICLES && pageCount < MAX_PAGES_PER_WINDOW) {
        pageCount++;
        
        try {
          const controller = new AbortController();
          const timeoutId = setTimeout(() => controller.abort(), 30000);
          
          console.log(`   üîç Petici√≥n p√°gina ${pageCount}: offset=${offset}, limit=${PAGE_SIZE}`);
          
          const res = await fetch(`${MELTWATER_API_URL}/v3/search/${searchId}`, {
            method: "POST",
            headers: {
              apikey: MELTWATER_TOKEN,
              "Content-Type": "application/json",
            },
            signal: controller.signal,
            body: JSON.stringify({
              tz: "America/Montevideo",
              start: startDate,
              end: endDate,
              limit: PAGE_SIZE,
              offset: offset,
              language: "es",
              content_type: includeSocial ? undefined : "news",
              sort: sortBy,
              include_social: includeSocial,
              include_blog: includeSocial,
              include_forum: includeSocial
            }),
          });

          clearTimeout(timeoutId);
          
          if (res.ok) {
            const data = await res.json();
            const documents = data.result?.documents || [];
            
            if (documents.length === 0) {
              console.log(`   ‚ö†Ô∏è  Sin m√°s resultados en esta ventana`);
              windowHasMore = false;
              break;
            }
            
            // Si recibimos menos de PAGE_SIZE, no hay m√°s en esta ventana
            if (documents.length < PAGE_SIZE) {
              console.log(`   ‚ÑπÔ∏è  √öltima p√°gina de esta ventana (${documents.length} art√≠culos)`);
              windowHasMore = false;
            }
            
            // Filtrar duplicados usando ID mejorado
            const newDocuments = documents.filter(doc => {
              const docId = generateDocumentId(doc);
              if (seenIds.has(docId)) {
                return false;
              }
              seenIds.add(docId);
              return true;
            });
            
            allDocuments.push(...newDocuments);
            
            console.log(`   ‚úÖ ${documents.length} recibidos, ${newDocuments.length} nuevos √∫nicos, ${allDocuments.length} total acumulado`);
            
            // Si ya tenemos suficientes, detener
            if (allDocuments.length >= MIN_ARTICLES) {
              console.log(`   üéØ Objetivo alcanzado! ${allDocuments.length} art√≠culos √∫nicos obtenidos`);
              break;
            }
            
            // Incrementar offset para siguiente p√°gina
            offset += PAGE_SIZE;
            
            // Delay entre peticiones (2 segundos para evitar rate limits)
            await new Promise(resolve => setTimeout(resolve, 2000));
            
          } else {
            const errorText = await res.text().catch(() => 'No error text');
            console.error(`   ‚ö†Ô∏è  Error ${res.status}: ${errorText}`);
            
            if (res.status === 429) {
              const retryAfter = res.headers.get('retry-after');
              const waitTime = retryAfter ? parseInt(retryAfter) * 1000 : 5000;
              console.log(`   ‚è≥ Rate limit, esperando ${waitTime/1000}s...`);
              await new Promise(resolve => setTimeout(resolve, waitTime));
            } else if (res.status >= 400 && res.status < 500) {
              // Error del cliente, saltar esta p√°gina
              console.log(`   üîÑ Error del cliente, saltando p√°gina...`);
              windowHasMore = false;
              break;
            } else {
              // Error del servidor, esperar y continuar
              await new Promise(resolve => setTimeout(resolve, 2000));
            }
          }
        } catch (error) {
          console.error(`   ‚ö†Ô∏è  Error en petici√≥n: ${error.name} - ${error.message}`);
          if (error.name === 'AbortError') {
            console.log(`   ‚è≥ Timeout, esperando 5s...`);
            await new Promise(resolve => setTimeout(resolve, 5000));
          } else {
            await new Promise(resolve => setTimeout(resolve, 1000));
          }
          // No romper el loop, intentar siguiente p√°gina
        }
      }
      
      // Si ya tenemos suficientes, no probar m√°s ventanas
      if (allDocuments.length >= MIN_ARTICLES) {
        break;
      }
      
      // Delay entre ventanas
      if (allDocuments.length < MIN_ARTICLES) {
        console.log(`   ‚è≥ Esperando 1s antes de siguiente ventana...`);
        await new Promise(resolve => setTimeout(resolve, 1000));
      }
    }

    if (allDocuments.length > 0) {
      console.log(`\n‚úÖ Meltwater: ${allDocuments.length} art√≠culos √∫nicos obtenidos`);
      
      // Si tenemos menos del m√≠nimo, loguear advertencia pero devolver lo que tenemos
      if (allDocuments.length < MIN_ARTICLES) {
        console.warn(`‚ö†Ô∏è  Advertencia: Solo se obtuvieron ${allDocuments.length} art√≠culos, se solicitaban m√≠nimo ${MIN_ARTICLES}`);
      }
      
      return { result: { documents: allDocuments } };
    } else {
      console.error(`‚ö†Ô∏è  Todas las peticiones de Meltwater fallaron o devolvieron 0 art√≠culos`);
    }
  } catch (error) {
    console.error(`‚ö†Ô∏è  Error en Meltwater m√∫ltiple: ${error.message}`);
  }

    if (allDocuments.length === 0) {
      throw new Error(`No se pudieron obtener noticias de Meltwater para searchId: ${searchId}. API no disponible o sin resultados.`);
    }
    
    console.log(`‚úÖ Usando ${allDocuments.length} art√≠culos reales de Meltwater`);
    return { result: { documents: allDocuments } };
}

// Endpoint principal para obtener noticias personalizadas seg√∫n suscriptor o configuraci√≥n por defecto
router.post("/personalized", async (req, res) => {
  try {
    await ensureConnection();
    
    const { email, countryId, sectorId, includeSocial } = req.body;
    
    // Caso 1: Si se proporcionan IDs directos, usarlos (prioridad m√°s alta)
    if (countryId || sectorId) {
      console.log(`üîç Buscando noticias con IDs directos: countryId=${countryId}, sectorId=${sectorId}`);
      
      const resultsPais = countryId
        ? await getSearchResults(countryId, includeSocial)
        : { result: { documents: [] } };
      const resultsSector = sectorId
        ? await getSearchResults(sectorId, includeSocial)
        : { result: { documents: [] } };

      const paisDocs = resultsPais.result?.documents || [];
      const sectorDocs = resultsSector.result?.documents || [];
      
      console.log(`üìä RESUMEN DE DATOS OBTENIDOS (IDs directos):`);
      console.log(`   - Noticias del pa√≠s: ${paisDocs.length}`);
      console.log(`   - Noticias del sector: ${sectorDocs.length}`);
      console.log(`   - Total noticias: ${paisDocs.length + sectorDocs.length}`);

      return res.json({
        success: true,
        pais: paisDocs,
        sector: sectorDocs,
        source: "direct_ids"
      });
    }

    // Caso 2: Si hay email espec√≠fico, buscar suscriptor y sus b√∫squedas
    if (email && email !== "default") {
      console.log(`üîç Buscando suscriptor con email: ${email}`);
      
      const subscriber = await Subscriber.findOne({ email: email.toLowerCase() });
      if (!subscriber) {
        return res.status(404).json({ 
          success: false, 
          message: "Usuario no encontrado",
          suggestion: "Verifica el email o usa 'default' para noticias generales"
        });
      }

      // Buscar suscripciones activas del suscriptor
      const subscriptions = await Subscription.find({ 
        subscriberId: subscriber._id, 
        isActive: true 
      }).populate('searchId');

      if (subscriptions.length === 0) {
        return res.json({
          success: true,
          pais: [],
          sector: [],
          source: "subscriber_no_subscriptions",
          message: "El usuario no tiene b√∫squedas suscritas"
        });
      }

      // Obtener noticias de todas las b√∫squedas suscritas
      const allPaisDocs = [];
      const allSectorDocs = [];

      for (const subscription of subscriptions) {
        const search = subscription.searchId;
        if (search && search.isActive) {
          // Determinar si es b√∫squeda de pa√≠s o sector basado en el nombre o configuraci√≥n
          const isCountrySearch = search.name.toLowerCase().includes('pa√≠s') || 
                                 search.name.toLowerCase().includes('country') ||
                                 search.countrySearchId;
          
          const results = await getSearchResults(search.countrySearchId || search.sectorSearchId, includeSocial);
          const docs = results.result?.documents || [];
          
          if (isCountrySearch) {
            allPaisDocs.push(...docs);
          } else {
            allSectorDocs.push(...docs);
          }
        }
      }

      console.log(`üìä RESUMEN DE DATOS OBTENIDOS (email suscriptor):`);
      console.log(`   - Noticias del pa√≠s: ${allPaisDocs.length}`);
      console.log(`   - Noticias del sector: ${allSectorDocs.length}`);
      console.log(`   - Total noticias: ${allPaisDocs.length + allSectorDocs.length}`);

      return res.json({
        success: true,
        pais: allPaisDocs,
        sector: allSectorDocs,
        source: "subscriber_subscriptions"
      });
    }

    // Caso 3: Email "default" o sin email - usar noticias por defecto
    console.log(`üîç Cargando noticias por defecto`);
    
    // Obtener configuraci√≥n por defecto del sistema
    const defaultConfig = await DefaultConfig.findOne();
    
    if (defaultConfig && (defaultConfig.defaultCountrySearchId || defaultConfig.defaultSectorSearchId)) {
      console.log(`üì∞ Usando configuraci√≥n por defecto del sistema: pa√≠s=${defaultConfig.defaultCountrySearchId || 'ninguno'}, sector=${defaultConfig.defaultSectorSearchId || 'ninguno'}`);
      
      const resultsPais = defaultConfig.defaultCountrySearchId
        ? await getSearchResults(defaultConfig.defaultCountrySearchId, includeSocial)
        : { result: { documents: [] } };
      console.log(`üîç DEBUG SECTOR - Llamando getSearchResults con ID: ${defaultConfig.defaultSectorSearchId}`);
      const resultsSector = defaultConfig.defaultSectorSearchId
        ? await getSearchResults(defaultConfig.defaultSectorSearchId, includeSocial)
        : { result: { documents: [] } };

      const paisDocs = resultsPais.result?.documents || [];
      const sectorDocs = resultsSector.result?.documents || [];
      
      console.log(`üìä RESUMEN DE DATOS OBTENIDOS (configuraci√≥n por defecto):`);
      console.log(`   - Noticias del pa√≠s: ${paisDocs.length}`);
      console.log(`   - Noticias del sector: ${sectorDocs.length}`);
      console.log(`   - Total noticias: ${paisDocs.length + sectorDocs.length}`);
      console.log(`üîç DEBUG SECTOR - Primeros 3 art√≠culos del sector:`);
      sectorDocs.slice(0, 3).forEach((doc, index) => {
        console.log(`   ${index + 1}. ${doc.content?.title || doc.title || 'Sin t√≠tulo'}`);
        console.log(`      Fuente: ${doc.source?.name || 'Sin fuente'}`);
        console.log(`      ID: ${doc.id || 'Sin ID'}`);
      });

      return res.json({
        success: true,
        pais: paisDocs,
        sector: sectorDocs,
        source: "system_default_config",
        defaults: {
          country: defaultConfig.defaultCountrySearchId || null,
          sector: defaultConfig.defaultSectorSearchId || null
        }
      });
    } else {
      // Si no hay configuraci√≥n por defecto, usar cualquier suscriptor activo como fallback
      const fallbackSubscriber = await Subscriber.findOne({ isActive: true });
      
      if (fallbackSubscriber) {
        console.log(`‚ö†Ô∏è No hay configuraci√≥n por defecto, usando fallback: ${fallbackSubscriber.email}`);
        
        const resultsPais = fallbackSubscriber.countrySearchId
          ? await getSearchResults(fallbackSubscriber.countrySearchId, includeSocial)
          : { result: { documents: [] } };
        const resultsSector = fallbackSubscriber.sectorSearchId
          ? await getSearchResults(fallbackSubscriber.sectorSearchId, includeSocial)
          : { result: { documents: [] } };

        return res.json({
          success: true,
          pais: resultsPais.result?.documents || [],
          sector: resultsSector.result?.documents || [],
          source: "fallback_subscriber",
          defaults: {
            country: null,
            sector: null
          }
        });
      } else {
        // Si no hay suscriptores, devolver arrays vac√≠os pero √©xito
        console.log(`‚ö†Ô∏è No hay suscriptores disponibles, devolviendo arrays vac√≠os`);
        
        return res.json({
          success: true,
          pais: [],
          sector: [],
          source: "no_subscribers",
          message: "No hay suscriptores configurados",
          defaults: {
            country: null,
            sector: null
          }
        });
      }
    }
  } catch (error) {
    console.error("‚ùå Error en /api/news/personalized:", error.message);
    res.status(500).json({ 
      success: false, 
      message: error.message,
      details: "Error interno del servidor"
    });
  }
});

// Endpoint para limpiar cach√© y forzar nuevas peticiones a Meltwater
router.get("/clear-cache", async (req, res) => {
  try {
    await ensureConnection();
    
    console.log(`üßπ Cache deshabilitado - No hay cach√© que limpiar`);
    
    res.json({
      success: true,
      message: `Cache deshabilitado - No hay cach√© que limpiar`,
      deletedCount: 0,
      note: "Cach√© deshabilitado temporalmente - Peticiones directas a Meltwater"
    });
  } catch (error) {
    console.error("‚ùå Error limpiando cache:", error);
    res.status(500).json({
      success: false,
      message: "Error limpiando cache",
      error: error.message
    });
  }
});


module.exports = router;
